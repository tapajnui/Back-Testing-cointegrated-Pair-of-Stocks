# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y28t8g5BXgDKfZwYFyduP1rGeyUwCcK3
"""

import yfinance as yf
import numpy as np
from sklearn.linear_model import LinearRegression

# Define the stock symbols and the date range
stock_symbols = ['INFY.NS', 'TCS.NS']
start_date = '1992-01-01'
end_date = '2023-01-01'

# Fetch stock data using yfinance
stock_data = yf.download(stock_symbols, start=start_date, end=end_date)['Close']

# Calculate daily returns
returns = stock_data.pct_change().dropna()

# Initialize lists to store results
error_ratios = []
std_error_intercepts = []
std_error_residuals = []

# Loop through stock pairs
for i in range(len(stock_symbols)):
    for j in range(i + 1, len(stock_symbols)):
        # Define independent and dependent variables
        X = returns[stock_symbols[i]].values.reshape(-1, 1)
        y = returns[stock_symbols[j]].values

        # Create linear regression model
        model = LinearRegression()

        # Fit the model
        model.fit(X, y)

        # Calculate residuals and standard error of residuals
        residuals = y - model.predict(X)
        std_error_residual = np.std(residuals)

        # Calculate standard error of intercept
        std_error_intercept = std_error_residual * np.sqrt(np.mean(X ** 2))

        # Calculate error ratio
        error_ratio = std_error_intercept / std_error_residual

        # Append results to lists
        error_ratios.append(error_ratio)
        std_error_intercepts.append(std_error_intercept)
        std_error_residuals.append(std_error_residual)

# Find the minimum error ratio and corresponding indices
min_error_ratio = min(error_ratios)
min_error_ratio_index = error_ratios.index(min_error_ratio)

# Print the results for the stock pair with the minimum error ratio
stock_pair = (stock_symbols[min_error_ratio_index], stock_symbols[min_error_ratio_index + 1])
print(f"Regression {stock_pair[0]} on {stock_pair[1]}:")
print("Error Ratio:", min_error_ratio)
print(f"{stock_pair[0]} on {stock_pair[1]} has a lower error ratio.")